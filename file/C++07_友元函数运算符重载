#include <iostream>
using namespace std;

/*

//友元函数
class A{
private :
    int i;
public :
    A(int i){
        this->i = i;
    }
    void print(){
        cout<<"i: "<< i <<endl;
    }
    //友元函数
    friend void modify_i(A *p, int a);

};

//友元函数的实现，在友元函数中可以访问私有的属性
void modify_i(A *p, int a){
    p->i = a;
}

int main(int argc, const char * argv[]) {
    A* a = new A(10);
    modify_i(a, 20);
    a->print();

    return 0;
}

*/

/*

 //友元类
class A{
    //友元类
    friend class B;
private :
    int i;
public :
    A(int i){
        this->i = i;
    }
    void print(){
        cout<<"i: "<< i <<endl;
    }


};

class B{
public:
    //B 这个友元类可以访问A类的任何属性包括私有
    void accessAny(){
        a.i = 30;
    }
    private :
    A a;

};

 */


/*

 // 运算符重载
class Point{

public :
    int x;
    int y;
    public :
    Point(int x = 0, int y = 0){
        this->x = x;
        this->y = y;
    }
    void print(){
        cout<<"x: "<< x <<", y: "<< y <<endl;
    }


};

//重载“+”
Point operator+(Point &p1, Point &p2){
    Point tmp(p1.x+p2.x, p1.y+p2.y);
    return tmp;
}

int main(int argc, const char * argv[]) {
    Point p1(10, 20);
    Point p2(30, 40);

    Point p3 = p1 + p2;
    p3.print();
    return 0;
}


 */

/*
class Point{

    public :
    int x;
    int y;
    public :
    Point(int x = 0, int y = 0){
        this->x = x;
        this->y = y;
    }
    //成员函数，运算符重载
    Point operator+(Point &p2){
        Point tmp(this->x + p2.x, this->y+p2.y);
        return tmp;
    }

    void print(){
        cout<<"x: "<< x <<", y: "<< y <<endl;
    }


};


int main(int argc, const char * argv[]) {
    Point p1(10, 20);
    Point p2(30, 40);

    Point p3 = p1 + p2;
    p3.print();
    return 0;
}
*/


class Point{
    friend Point operator+(Point &p1, Point &p2);
public :
    int x;
    int y;
public :
    Point(int x = 0, int y = 0){
        this->x = x;
        this->y = y;
    }
    void print(){
        cout<<"x: "<< x <<", y: "<< y <<endl;
    }


};

//重载“+” 友元函数
Point operator+(Point &p1, Point &p2){
    Point tmp(p1.x+p2.x, p1.y+p2.y);
    return tmp;
}


int main(int argc, const char * argv[]) {
    Point p1(10, 20);
    Point p2(30, 40);

    Point p3 = p1 + p2;
    p3.print();
    return 0;
}
