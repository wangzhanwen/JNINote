
#include <iostream>
using namespace std;

//模板类
template<class T>
class A{
public :
    A(T a){
        this->a = a;
    }
protected:
    T a;
};

//继承模板类
class B : public A<int>{
public :
    B(int a, int b):A(a){
        this->b = b;
        A::a = a;
    }

private :
    int b;
};


//模板类继承模板类
template<class T>
class C: public A<T>{
public:
    C(T c, T a):A<T>(a){
        this->C = c;
    }
protected:
    T c;
};

int main(int argc, const char * argv[]) {
    //实例化模板类
    A<int> a(8);
    B b(3,4);

    return 0;
}


/*
//模板函数（泛型）
template <typename T>
void mySwap(T& a, T& b){
    T tmp = 0;
    tmp = a;
    a = b;
    b = tmp;
}

int main(int argc, const char * argv[]) {
    int a = 12;
    int b = 14;
    cout<<"a: "<<a<<"  b:  "<<b<<endl;
    mySwap<int>(a, b);
    cout<<"a: "<<a<<"  b:  "<<b<<endl;


    return 0;
}
*/
