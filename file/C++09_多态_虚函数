
#include <iostream>
#include "Plane.hpp"
#include "Jet.hpp"
#include "Copter.hpp"
using namespace std;

//虚函数
//多态(程序的扩展性)
//动态多态： 程序运行过程中，觉得哪一个函数被调用（重写）
//静态多态： 重载

//发送动态多态的条件：
//  1. 继承
//  2. 父类的引入或指针指向子类的对象
//  3. 函数重写


/*

void bizPlay(Plane& p){
    p.fly();
    p.land();
}

int main(int argc, const char * argv[]) {
    Plane p0;
    bizPlay(p0);

    Jet j0;
    bizPlay(j0);

    Copter c0;
    bizPlay(c0);

    return 0;
}

*/


/*

//纯虚函数（抽象类）
// 1. 当一个类具有一个纯虚函数，这个类就是抽象类
// 2. 抽象类不能实例化
// 3. 子类继承抽象类，必须实现纯虚函数，如果没有，子类也是抽象类

class Shape{
public:
    //纯虚函数 “ = 0”
    virtual void sayArea() = 0;
    void print(){
        cout<<"hi, 我是抽象类"<<endl;
    }
};

class Circle : public Shape{
public:
    Circle(int r){
        this->r = r;
    }
    void sayArea(){
        cout<<"圆的面积："<< (3.14 * r * r) <<endl;
    }
private:
    int r;
};

int main(int argc, const char * argv[]) {
    Circle c0(10);
    c0.sayArea();

    return 0;
}

*/

/*

//接口（只是逻辑上的划分，语法上跟抽象类的写法没有区别）
//可以当做一个接口
//抽象类的作用： 为了继承约束，根本不知道未来的实现

class Drawble{
    virtual void draw();
};

int main(int argc, const char * argv[]) {

    return 0;
}

*/

//模板函数（泛型）

template <typename T>
void mySwap(T& a, T& b){
    T tmp = 0;
    tmp = a;
    a = b;
    b = tmp;
}

int main(int argc, const char * argv[]) {
    int a = 12;
    int b = 14;
    cout<<"a: "<<a<<"  b:  "<<b<<endl;
    mySwap<int>(a, b);
    cout<<"a: "<<a<<"  b:  "<<b<<endl;


    return 0;
}
